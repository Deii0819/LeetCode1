class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());
        for(int i=0;i<nums.size();++i)
        {
            int sum=-nums[i];  // means 0-nums[i] 
            int front=i+1;     //begin searching from index( i + 1 )
            int back=nums.size()-1;
            while(back>front)
            {
                int two=nums[back]+nums[front];    // 寻找两个数满足 two + sum = 0; 从front到back慢慢缩小范围( front++ 和 back-- )
                if(two<sum)
                {
                    front++;
                }
                else if (two>sum)
                {
                    back--;
                }
                else 
                // two == sum 此时 two - nums[i] = 0                   
                {
                    vector<int> triplet({nums[i],nums[front],nums[back]});                   
                    res.push_back(triplet);                  
                    
                    // when success !
                    // 给出while循环,使得 front 和 front+1 不重复!
                    while (front < back && nums[front] == triplet[1]) front++;
                    
                    // 给出while循环,使得 back 和 back-1 不重复
                    while (front < back && nums[back] == triplet[2]) back--;          
                 }                   
             }
             
             // 如果i+1和i相同,说明two相同,说明之前已经找过所有的two了,所以不用再找相同的i+1的two了
            while(i+1<nums.size() && nums[i]==nums[i+1]) i++;
        }
        return res;
    }
};
